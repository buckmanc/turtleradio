#!/usr/bin/env bash

# supports termux, ubuntu, ubuntu server, pi, git bash on windows, and likely more

optLoop=0

for arg in "$@"
do
	if [[ "$arg" == "-l" || "$arg" == "--loop" ]]
	then
		optLoop=1
	fi
done

while true
do

	if (type termux-wifi-scaninfo >/dev/null 2>&1)
	then
		# turn json output into sorta csv
		# termux-wifi-scaninfo does not actively scan, only returns results of the last scan
		logLines=$(termux-wifi-scaninfo | jq -r '.[] | "\"\(.ssid)\",\(.bssid)"')
	elif (type nmcli >/dev/null 2>&1)
	then
		# split on unescaped :
		# blank SSIDs start with the separator, so fix those
		# unescape remaining :
		logLines="$(nmcli --get-values 'ssid,bssid' dev wifi | perl -pe 's/(.*)(?<=[^\\]):(.+)/"$1",$2/g' | perl -pe 's/^:/"",/g' | perl -pe 's/\\:/:/g')"
	elif (type iwlist >/dev/null 2>&1) || [[ -x /sbin/iwlist ]]
	then
		# find iwlist if it's not on path
		iwlistCommand="$(which iwlist || echo "/sbin/iwlist")"

		# iwlist usually needs sudo to show more than just the connected network
		logLines="$($iwlistCommand wlan0 scan | grep -iP '(ssid|address)' | perl -00pe 's/ +Cell \d+ - Address: (.+)\n +ESSID:([^\n]+)/$2,$1/g')"

	elif (type netsh >/dev/null 2>&1)
	then
		# run a wifi scan if possible
		# otherwise netsh just returns the results of the last scan
		if (type wifi >/dev/null 2>&1)
		then
			wifi scan >/dev/null 2>&1
		else
			echo "consider installing winwifi to actively scan, instead of logging the results of the prior scan"
			echo "pip install winwifi"
		fi

		logLines="$(netsh wlan show networks mode=bssid | grep -i ssid | tr -d '\r' | perl -00pe 's/SSID \d+ : ?(.*?)?\n +BSSID \d+ +: ([^\s\n]+)/"$1",$2/g')"
		ssid=""

		# netsh groups bssids under ssids, so need to expand those out
		while read -r line
		do
			if echo "$line" | grep -Piq '^"'
			then
				ssid="$(echo "$line" | grep -Pio '^"[^"]*"')"
				tempLogLine="$line"
				# echo "ssid tempLogLine: $tempLogLine"
			else
				bssid="$(echo "$line" | grep -Pio '\S+$')"
				tempLogLine="$ssid,$bssid"
				# echo "bssid tempLogLine: $tempLogLine"
			fi

			tempLogLines+="$tempLogLine"$'\n'
		done < <( echo "$logLines" )

		tempLogLines="$(echo "$tempLogLines" | perl -00pe 's/\n+$//g')"
		logLines="$tempLogLines"
	else
		echo "couldn't find a program to scan wifi with"
		return 1
	fi

	logResult="$("$HOME/bin/_log" wifi "$logLines")"

	# transform nopers message
	if echo "$logResult" | grep -Piq "^(no new|please provide)"
	then
		# but only if not looping forever
		if [[ "$optLoop" == "0" ]]
		then
			echo "no new networks found"
		fi
	else
		echo "$logResult"
	fi

	if [[ "$optLoop" == "0" ]]
	then
		break
	fi

done
